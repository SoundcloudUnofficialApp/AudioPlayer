//
//  RetryEventProducer.swift
//  AudioPlayer
//
//  Created by Kevin DELANNOY on 10/04/16.
//  Copyright Â© 2016 Kevin Delannoy. All rights reserved.
//

import Foundation

private extension Selector {
    /// The selector to call when the timer ticks.
    static let timerTicked = #selector(RetryEventProducer.timerTicked(_:))
}

/// A `RetryEventProducer` generates `RetryEvent`s when there should be a retry based on some information about
/// interruptions.
class RetryEventProducer: NSObject, EventProducerP {
    
    /// `RetryEvent` is a list of event that can be generated by `RetryEventProducer`.
    enum RetryEvent: EventP {
        
        /// A retry is available
        case retryAvailable
        
        /// Retrying is no longer an option
        case retryFailed
    }

    /// The timer used to adjust quality
    private var timer: Timer?

    
    weak var eventListener: EventListenerP?

    
    private var listening = false

    /// Interruption counter. It will be used to determine whether the quality should change.
    private var retryCount = 0

    /// The maximum number of interruption before generating an event. Default value is 10.
    var maxRetryCount = 10

    /// The delay to wait before cancelling last retry and retrying. Default value is 10 seconds.
    var retryTimeout = TimeInterval(10)


    /// Starts listening to the player events.
    func startProducing() {
        guard !listening else {
            return
        }
        retryCount = 0

        //Creates a new timer for next retry
        restartTimer()
        listening = true
    }

    /// Stops listening to the player events.
    func stopProducing() {
        guard listening else {
            return
        }

        timer?.invalidate()
        timer = nil
        listening = false
    }

    /// Stops the current timer if any and restart a new one.
    private func restartTimer() {
        timer?.invalidate()
        timer = Timer.scheduledTimer(
            timeInterval: retryTimeout,
            target: self,
            selector: .timerTicked,
            userInfo: nil,
            repeats: false)
    }

    /// The retry timer ticked.
    ///
    /// - Parameter _: The timer.
    @objc fileprivate func timerTicked(_: AnyObject) {
        retryCount += 1

        if retryCount < maxRetryCount {
            let ev = RetryEvent.retryAvailable
            eventListener?.onEvent(ev, generetedBy: self)
            restartTimer()
            return
        }
        let ev = RetryEvent.retryFailed
        eventListener?.onEvent(ev, generetedBy: self)
    }
    
    deinit {
        stopProducing()
    }
}
